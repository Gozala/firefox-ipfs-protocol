"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = exports.Factory = exports.IP$$ProtocolHandler = exports.IP$$URL = exports.FSProtocolHandler = exports.FSURL = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _gecko = require("./gecko");

var _cids = require("cids");

var _cids2 = _interopRequireDefault(_cids);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ioService = _gecko.Cc['@mozilla.org/network/io-service;1'].getService(_gecko.Ci.nsIIOService);

var standardURL = _gecko.Cc["@mozilla.org/network/standard-url;1"].createInstance(_gecko.Ci.nsIStandardURL);

standardURL.QueryInterface(_gecko.Ci.nsIURL);

var runtime = _gecko.Cc["@mozilla.org/xre/app-info;1"].getService(_gecko.Ci.nsIXULRuntime);

var childProcessMessageManager = _gecko.Cc["@mozilla.org/childprocessmessagemanager;1"].getService(_gecko.Ci.nsISyncMessageSender);

var parentProcessMessageManager = _gecko.Cc["@mozilla.org/parentprocessmessagemanager;1"].getService(_gecko.Ci.nsIMessageBroadcaster);

var securityManager = _gecko.Cc["@mozilla.org/scriptsecuritymanager;1"].getService(_gecko.Ci.nsIScriptSecurityManager);

var componentRegistrar = _gecko.Cm.QueryInterface(_gecko.Ci.nsIComponentRegistrar);

var FSURL = exports.FSURL = function () {
  _createClass(FSURL, null, [{
    key: "parse",
    value: function parse(spec) {
      var _spec$split = spec.split(':'),
          _spec$split2 = _toArray(_spec$split),
          scheme = _spec$split2[0],
          _ = _spec$split2.slice(1);

      var _spec$substr$split$1$ = spec.substr(scheme.length).split(/:\/*/)[1].split('/'),
          _spec$substr$split$1$2 = _toArray(_spec$substr$split$1$),
          protocol = _spec$substr$split$1$2[0],
          id = _spec$substr$split$1$2[1],
          pathEntries = _spec$substr$split$1$2.slice(2);

      var path = pathEntries.length === 0 ? '' : "/" + pathEntries.join('/');

      return new FSURL(scheme, protocol, id, path);
    }
  }]);

  function FSURL(scheme, protocol, id, path) {
    _classCallCheck(this, FSURL);

    this.scheme = scheme;
    this.protocol = protocol;
    this.id = id;
    this.path = path;
  }

  return FSURL;
}();

var FSProtocolHandler = exports.FSProtocolHandler = function () {
  function FSProtocolHandler() {
    _classCallCheck(this, FSProtocolHandler);

    this.defaultPort = -1;
    this.protocolFlags = _gecko.Ci.nsIProtocolHandler.URI_LOADABLE_BY_SUBSUMERS | _gecko.Ci.nsIProtocolHandler.ORIGIN_IS_FULL_SPEC;
    this.scheme = 'fs';
  }

  _createClass(FSProtocolHandler, [{
    key: "allowPort",
    value: function allowPort(port, scheme) {
      return false;
    }
  }, {
    key: "newURI",
    value: function newURI(spec, charset, baseURI) {
      dump("FSProtocolHandler.newURI(" + JSON.stringify(spec) + ", " + JSON.stringify(charset) + ", " + (baseURI == null ? 'null' : baseURI.spec) + ")\n");
      if (baseURI === null || spec.startsWith(this.scheme + ":")) {
        var _FSURL$parse = FSURL.parse(spec),
            protocol = _FSURL$parse.protocol,
            id = _FSURL$parse.id,
            path = _FSURL$parse.path;

        var url = new IP$$URL(protocol, id, path);
        return ioService.newURI(IP$$URL.toBase16Encoded(url).toString(), charset, baseURI);
      } else {
        throw Error("FS Protocol handler did not expected to resolve " + spec + " relative to " + baseURI.spec);
      }
    }
  }, {
    key: "newChannel",
    value: function newChannel(uri) {
      return this.newChannel2(uri, null);
    }
  }, {
    key: "newChannel2",
    value: function newChannel2(uri, loadInfo) {
      dump("FSProtocolHandler.newChannel2(" + JSON.stringify(uri.spec) + ", " + String(loadInfo) + ")\n");
      throw new Error("Did not expect to create channel for " + uri.spec);
    }
  }, {
    key: "QueryInterface",
    value: function QueryInterface(iid) {
      if (iid.equals(_gecko.Ci.nsIProtocolHandler) || iid.equals(_gecko.Ci.nsISupports)) {
        return this;
      }
      dump("!!! FSProtocolHandler.QueryInterface " + iid.name + " " + iid.number + "\n");
      throw _gecko.Cr.NS_ERROR_NO_INTERFACE;
    }
  }]);

  return FSProtocolHandler;
}();

var IP$$URL = exports.IP$$URL = function () {
  _createClass(IP$$URL, null, [{
    key: "parse",
    value: function parse(spec) {
      var _spec$split3 = spec.split(':'),
          _spec$split4 = _toArray(_spec$split3),
          scheme = _spec$split4[0],
          _ = _spec$split4.slice(1);

      var _spec$substr$split$1$3 = spec.substr(scheme.length).split(/:\/*/)[1].split('/'),
          _spec$substr$split$1$4 = _toArray(_spec$substr$split$1$3),
          id = _spec$substr$split$1$4[0],
          pathEntries = _spec$substr$split$1$4.slice(1);

      var path = pathEntries.length === 0 ? '' : "/" + pathEntries.join('/');

      return new IP$$URL(scheme, id, path);
    }
  }, {
    key: "toBase16Encoded",
    value: function toBase16Encoded(uri) {
      return new IP$$URL(uri.scheme, new _cids2.default(uri.id).toV1().toBaseEncodedString('base16'), uri.path);
    }
  }, {
    key: "toBaseEncodedV0",
    value: function toBaseEncodedV0(uri) {
      return new IP$$URL(uri.scheme, new _cids2.default(uri.id).toV0().toBaseEncodedString('base58btc'), uri.path);
    }
  }]);

  function IP$$URL(scheme, id, path) {
    _classCallCheck(this, IP$$URL);

    this.scheme = scheme;
    this.id = id;
    this.path = path;
  }

  _createClass(IP$$URL, [{
    key: "toBase16Encoded",
    value: function toBase16Encoded() {
      return IP$$URL.toBase16Encoded(this);
    }
  }, {
    key: "toBaseEncodedV0",
    value: function toBaseEncodedV0() {
      return IP$$URL.toBaseEncodedV0(this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.scheme + "://" + this.id + this.path;
    }
  }]);

  return IP$$URL;
}();

var IP$$ProtocolHandler = exports.IP$$ProtocolHandler = function () {
  function IP$$ProtocolHandler(scheme) {
    _classCallCheck(this, IP$$ProtocolHandler);

    this.defaultPort = -1;
    this.protocolFlags = _gecko.Ci.nsIProtocolHandler.URI_LOADABLE_BY_SUBSUMERS;

    this.scheme = scheme;
  }

  _createClass(IP$$ProtocolHandler, [{
    key: "allowPort",
    value: function allowPort(port, scheme) {
      return false;
    }
  }, {
    key: "newURI",
    value: function newURI(spec, charset, baseURI) {
      dump("IP$$ProtocolHandler<" + this.scheme + ">.newURI(" + JSON.stringify(spec) + ", " + JSON.stringify(charset) + ", " + (baseURI == null ? 'null' : baseURI.spec) + ")\n");

      if (baseURI === null || spec.startsWith(this.scheme + ":")) {
        var url = IP$$URL.parse(spec);
        if (url.scheme === this.scheme) {
          standardURL.init(_gecko.Ci.nsIStandardURL.URLTYPE_STANDARD, this.defaultPort, IP$$URL.toBase16Encoded(url).toString(), charset, null);
        } else {
          throw Error("Invalid spec was passed " + spec + " for " + this.scheme + " protocol handler");
        }
      } else {
        standardURL.init(_gecko.Ci.nsIStandardURL.URLTYPE_STANDARD, this.defaultPort, spec, charset, baseURI);
      }
      return standardURL.clone();
    }
  }, {
    key: "newChannel",
    value: function newChannel(uri) {
      return this.newChannel2(uri, null);
    }
  }, {
    key: "newChannel2",
    value: function newChannel2(uri, loadInfo) {
      dump("IP$$ProtocolHandler<" + this.scheme + ">.newChannel2(" + JSON.stringify(uri.spec) + ", " + String(loadInfo) + ")\n");

      var _IP$$URL$toBaseEncode = IP$$URL.toBaseEncodedV0(IP$$URL.parse(uri.spec)),
          scheme = _IP$$URL$toBaseEncode.scheme,
          id = _IP$$URL$toBaseEncode.id,
          path = _IP$$URL$toBaseEncode.path;

      var spec = "http://localhost:8080/" + scheme + "/" + id + path;
      var url = ioService.newURI(spec, uri.originCharset, null);
      var channel = ioService.newChannelFromURIWithLoadInfo(url, loadInfo);
      channel.originalURI = uri;
      return channel;
    }
  }, {
    key: "QueryInterface",
    value: function QueryInterface(iid) {
      if (iid.equals(_gecko.Ci.nsIProtocolHandler) || iid.equals(_gecko.Ci.nsISupports)) {
        return this;
      }
      dump("!!! FSProtocolHandler.QueryInterface " + iid.name + " " + iid.number + "\n");
      throw _gecko.Cr.NS_ERROR_NO_INTERFACE;
    }
  }]);

  return IP$$ProtocolHandler;
}();

var Factory = exports.Factory = function () {
  function Factory(instance) {
    _classCallCheck(this, Factory);

    this.instance = instance;
  }

  _createClass(Factory, [{
    key: "createInstance",
    value: function createInstance(outer, iid) {
      if (outer != null) {
        throw _gecko.Cr.NS_ERROR_NO_AGGREGATION;
      }

      return this.instance;
    }
  }, {
    key: "lockFactory",
    value: function lockFactory(lock) {
      throw _gecko.Cr.NS_ERROR_NOT_IMPLEMENTED;
    }
  }, {
    key: "QueryInterface",
    value: function QueryInterface(iid) {
      if (iid.equals(_gecko.Ci.nsISupports) || iid.equals(_gecko.Ci.nsIFactory)) {
        return this;
      }
      dump("!!! Factory.QueryInterface " + iid.name + " " + iid.number + "\n");
      throw _gecko.Cr.NS_ERROR_NO_INTERFACE;
    }
  }]);

  return Factory;
}();

var main = exports.main = function main() {
  componentRegistrar.registerFactory((0, _gecko.CID)('{b6c93a47-778a-f643-b0c8-79f6be685e06}'), 'FS protocol handler', '@mozilla.org/network/protocol;1?name=fs', new Factory(new FSProtocolHandler()));

  componentRegistrar.registerFactory((0, _gecko.CID)('{d0415967-75a1-4528-8030-b79d5552127d}'), 'IPFS protocol handler', '@mozilla.org/network/protocol;1?name=ipfs', new Factory(new IP$$ProtocolHandler('ipfs')));

  componentRegistrar.registerFactory((0, _gecko.CID)('{f866a46c-2e79-44e6-929d-334fdf8a7fd7}'), 'IPNS protocol handler', '@mozilla.org/network/protocol;1?name=ipns', new Factory(new IP$$ProtocolHandler('ipns')));

  componentRegistrar.registerFactory((0, _gecko.CID)('{8ef93514-306a-49a5-a9fa-f7a9c709b061}'), 'IPDL protocol handler', '@mozilla.org/network/protocol;1?name=ipdl', new Factory(new IP$$ProtocolHandler('ipdl')));

  if (runtime.processType == _gecko.Ci.nsIXULRuntime.PROCESS_TYPE_DEFAULT) {
    parentProcessMessageManager.loadProcessScript("data:,Components.utils.import(\"" + __URI__ + "\", {}).main()", true);
  }
};
//# sourceMappingURL=data:application/json;base64,